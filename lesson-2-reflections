*What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository it creates a .git folder. At this point there are no commmits. However git starts storing metadata about the project an creates the boilerplate for that. Once we do git commit the file we mark to track will get saved into the git system.

* How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediete area which is more like an intend to commit. Although git has started maintaining information about chaanges it hasnt recorded anything at that point. The working directory contains all files but the history is maintained by git. The working directory only contains the view we would like to see currently, while the repository contains all the snapshots. The benefit it offers is that it is great when you would like to commit half the files not all of the files in the directory or when you would like to stage changes but wait for some form of go ahead to commit, like an approval or others

* How can you use the staging area to make sure you have one commit per logical change?

	We can only stage files on one logical change. So even if we have multiple independent changes, we can commit only the files that are in one logical change. So that makes it convinient.

* What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are named commits. If we work on an experimental feature, or something new that need would be requiring approval on completion, it is better to have a branch. In that case we would not have to deal with messy commit histories when we need to fix stuff in a main branch. This would enable parralel development too when multiple people have to work on the same project

* How do the diagrams help you visualize the branch structure?

	Diagrams help us view the entire flow of the checkpoints done in the project. We can see at what point did the project branch and if the messages are useful, why did the projects branch. 

* What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Result of merging two branches together is that they form a new commit which includes both changes in the same commit. It effectively takes all the changes introduced in both branches and makes a new revision containing all the changes
